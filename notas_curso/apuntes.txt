
* Hicimos la configuracion del webpack.config.js 
* Descargamos babel-loader te permite hacer que tu código JavaScript sea compatible con todos los navegadores
      babel-loader 
      @babel/core es babel en general
      @babel/preset-env trae y te permite usar las ultimas características de JavaScript (JavaScript Moderno)
      @babel/plugin-transform-runtime te permite trabajar con todo el tema de asincronismo como ser async y await
      -D -> dependencias de Desarrollo

      Comando: npm install babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime -D 

* Debes crear el archivo de configuración de babel el cual tiene como nombre .babelrc e incluir:
      {
        "presets": [
          "@babel/preset-env"
        ],
        "plugins": [
          "@babel/plugin-transform-runtime"
        ]
      }

* Modificamos el archivo webpack.config.js adicionando:
      module: {
        //Son la reglas (rules) que vamos aplicar para babel-loader SIEMPRE en EXPRESIONES REGULARES
        rules: [
          {
            // Test declara que extensión de archivos que aplicara para el loader
            test: /\.m?js$/,
            // Exclude permite omitir archivos o carpetas especificas - Ej: node_modules pq esto haría romper el proyecto
            exclude: /node_modules/,
            // Use es un arreglo u objeto donde dices que loader aplicaras
            use: {
              loader: "babel-loader",
            },
          },
        ],
      },

* Para usar html con webpack se debe instalar un plugin y configurarlo en webpack.config.js:
      npm i html-webpack-plugin -D

      plugins: [
        new HtmlWebpackPlugin({
          // CONFIGURACIÓN DEL PLUGIN
          inject: true, // Hace la inserción de los elementos
          template: "./public/index.html", //Donde este el template inicial
          filename: "./index.html", //Nombre del archivo Resultado del Dist 
        }),
      ],

* Para los CSS debemos añadir unos plugin igual para que el webpack lo pueda procesar
      npm i mini-css-extract-plugin css-loader -D
      npm install stylus -D

* Debemos realizar varias cosas para funciones
      -No se debe incluir los Estilos (.css dentro del html)
      -Se debe importar los estilos en el archivo principal (index.js) Ej: import './styles/main.css';

* Incluir el plugin min-css-extract... en la configuracion del webpack
      const MiniCssExtractPlugin = require('mini-css-extract-plugin');
      
      -Incluir dentro de reglas (rules) las extensiones css ¬ sty | etc...
      {
        test: /\.css|.styl$/i,
        use: [MiniCssExtractPlugin.loader,
          'css-loader',
          'stylus-loader'
        ],
      }

* Adicionamos a la sesion de plugin (webpack.config.js) para que este se pueda ejecutar
      new MiniCssExtractPlugin()

* Ahora para copiar esos archivos que necesitamos en la carpeta de dist instalamos el siguiente plugin.
      - comando de instalación: npm i copy-webpack-plugin -D
      - configuramos: const CopyPlugin = require('copy-webpack-plugin');
      - configuramos en plugins: 
                  new CopyPlugin({
                              patterns: [
                                {
                                  //Carpeta o archivo origen
                                  from: path.resolve(__dirname, "src", "assets/images"), 
                                  //Carpeta o archivo destino 
                                  to: "assets/images"
                                }
                              ]
                            })
      - ES IMPORTANTE dejar claro que la ruta en el template o HTML debe ser la que quede la carpeta dist
        ejm: template-> "..src/assets/imagenes/prueba.png ........dist HTML-> "assets/imagenes/prueba.png"

* Pasaremos las images png como variables y con nombre a base64 para una mejor compresión 
      - Usamos access model que ya nos provee Webpack y lo que hacemos es modificar el webpack.config.js
      {
        test: /\.png/,
        type: 'asset/resource'
      }

      - Importamos las imagenes en la plantilla (template.js)
      import github from '../assets/images/github.png';
      import twitter from '../assets/images/twitter.png';
      import instagram from '../assets/images/instagram.png';

      y usamos {github} | {twitter} etc....
* (RECORDEMOS QUE EL FORMATO PARA FUENTES ES WOFF QUE ES EL OPTIMIZADO PARA WEB'S)
      - http://google-webfonts-helper.herokuapp.com/fonts De esta pagina podemos descargar las fuentes

* Añadimos las fuentes en el css 
      @font-face {
        font-family: 'Ubuntu';
        src: url('../assets/fonts/ubuntu-regular.woff2') format('woff2'),
          url('../assets/fonts/ubuntu-regular.woff') format('woff');
        font-weight: 400;
        font-style: normal;
      }

* Para añadir nuestras fuentes a las Distribución (dist) debemos instalar el loader
      - Comando: npm install url-loader file-loader -D
      - En el archivo webpack.config.js agregamos:
      OUTPUT -> assetModuleFilename: "assets/images/[hash][ext][query]"
      RULES lo siguiente:
      {
        // Test declara que extensión de archivos que aplicara para el loader
        test: /\.(woff|woff2)$/,
        use: {
          loader: "url-loader",
          options: {
            limit: 10000,
            mimetype: "application/font-woff", // Habilita o deshabilita la transformación de archivos en base64.
            name: "[name].[ext]", //Para que respete el nombre y extensión original
            outputPath: "./assets/fonts/", //Donde va a quedar el archivo
            publicPath: "./assets/fonts/", //Donde queda publicamente
            esModule: false,
          },
        },

* Optimización: hashes, compresión y minificación de archivos
      - Comando: npm install css-minimizer-webpack-plugin terser-webpack-plugin -D
* Agregamos en el webpack.config.js en import
      const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
      const TerserPlugin = require('terser-webpack-plugin');

      - Despues de Plugin agregamos la optimización
      optimization: {
        minimize: true,
        minimizer: [
          new CssMinimizerPlugin(),
          new TerserPlugin(),
        ]
      }

* Podemos adicionar el Hash para identificar cuando algo cambie y lo hacemos con [contenthash] (Revisar webpack.config.js)

* Como generamos Alias para acortar nuestras direcciones:
      - Dentro del resolve se colocar el @nombre del alias y la ruta:
      alias: {
        '@utils': path.resolve(__dirname, 'src/utils/'),
        '@templates': path.resolve(__dirname, 'src/templates/'),
        '@styles': path.resolve(__dirname, 'src/styles/'),
        '@images': path.resolve(__dirname, 'src/assets/images/'),
      }

* Uso de variables de entorno
      - Comando: npm install -D dotenv-webpack
      - Creamos los archivos .env | .env-example con el fin de saber el nombre de las variables
      - En caso real esto se debe pedir a las personas del proyecto para poder usarla (BD, API, Credenciales, etc)

* configuracion de la plugin:
      - creamos variable ---- const Dotenv = require("dotenv-webpack");
      - Incluimos en plugins ---- new Dotenv(),
      - En caso de usa mirar utils/getData.js 

* Para usar ambientes podemos crear un archivo para desarrollo y otro para producción:
      - Creamos webpack.config.dev.js para el ambiente de Desarrollo
      - agregamos en este archivo antes de resolve el MODO DE USO ---- mode: "development",
      - Cuando compilemos usamos este archivo 
      - Para facilidad modificamos package.json para modificar el comando: --- "dev": "webpack --config webpack.config.dev.js"
      - podemos quitar los optimizadores para ver realmente el codigo y saber que todo funciona en desarrollo

* Para el ambiente productivo vamos a limpiar y dejar lista la carpeta dist
      - instalamos el limpiador - Comando: npm install -D clean-webpack-plugin
      - Configuramos en el webpack.config.js QUE ES EL DE PRODUCCIÓN
      - webpack.config.js
        const { CleanWebpackPlugin } = require("clean-webpack-plugin");
        ...... En plugin'S
        new CleanWebpackPlugin(), 
      - PARA QUE PROCESE EN PRODUCCION y NOS ASEGUREMOS modificamos el comando de compilación
        "build": "webpack --mode production --config webpack.config.js",

* El modo Watch se activa de dos formas 
      - Dev:  en el archivo de webpack.config.dev.js agregamos el modo watch:true
      - Prod: podemos modificar el comando de compilacion "build:watch": "webpack --watch --config webpack.config.js"

* Tener nuestro propio servidor web de webpack
      - Comando: npm install webpack-dev-server -D
      - Agregamos el code al final del webpack desarrollo:
        devServer: {
          contentBase: path.join(__dirname, "dist"),
          compress: true,
          historyApiFallback: true, 
          port: 3006,
        },
      - Moficamos nuestro package: "start": "webpack serve --config webpack.config.dev.js"

* Webpack Bundle Analyzer 
      - Comando: npm install -D webpack-bundle-analyzer
      - Agregamos codigo en la config de desarrollo
        const BundleAnalyzerPlugin = require('webpack-bundle-analyzer')
        ........ en la parte plugin
        new BundleAnalyzerPlugin({
          analyzerPort: 1010
        })
      - Para sacar las estadisticas usamos el comando: npx webpack --profile --json > stats.json
      - para verla de forma amigable en la web usamos:npx webpack-bundle-analyzer stats.json
